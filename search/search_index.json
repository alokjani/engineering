{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to my Engineering Notes.</p>"},{"location":"agile/agile-artifacts/","title":"Agile Artifacts","text":""},{"location":"agile/agile-events/","title":"Agile Events","text":""},{"location":"agile/agile-roles/","title":"Agile Roles","text":""},{"location":"agile/agile-rules/","title":"Agile Rules","text":""},{"location":"agile/agile-values/","title":"Agile Values","text":""},{"location":"development/","title":"Infrastructure Development","text":""},{"location":"development/#web-development","title":"Web Development","text":""},{"location":"development/#mobile-development","title":"Mobile Development","text":""},{"location":"development/#embedded-development","title":"Embedded Development","text":""},{"location":"development/#data-development","title":"Data Development","text":""},{"location":"development/#game-development","title":"Game Development","text":""},{"location":"development/#systems-development","title":"Systems Development","text":""},{"location":"development/aiml-development/","title":"AI/ML Development","text":""},{"location":"development/data-development/","title":"Data Development","text":""},{"location":"development/embedded-development/","title":"Embedded Development","text":""},{"location":"development/game-development/","title":"Game Development","text":""},{"location":"development/infra-development/","title":"Infrastructure Development","text":""},{"location":"development/mobile-development/","title":"Mobile Development","text":"<p>This involves creating applications for mobile devices where UI/UX is tailored for touch interactions and smaller screens.</p> <p>Development tools: Xcode (iOS), Android Studio, cross-platform tools (Flutter, React Native)</p> <p>Languages: Swift, Kotlin, Java (native); JavaScript (React Native) are used.</p> <p>App has full access to Device features (GPS, Camera, sensors etc)</p> <p>Requires submission to app stores; updates can take time.</p> <p>Runs on mobile operating systems (iOS, Android)</p>"},{"location":"development/systems-development/","title":"Systems Development","text":"<p>Process of creating and maintaining systems software. </p> <p>Key aspects include: </p> <ul> <li><code>Kernel Programming</code>: Writing and optimizing the core components of the operating system (the kernel), which manages hardware resources and facilitates communication between hardware and software.</li> <li><code>Device Drivers</code>: Developing drivers that enable the operating system to communicate with hardware devices (like printers, graphics cards, and storage devices).</li> <li><code>System Libraries</code>: Creating libraries that provide common functionalities for application programs to interact with the operating system.</li> </ul> <p>Skills &amp; Knowledge</p> <ul> <li>Systems-level programming language C/C++ or assembly </li> <li>CPU Architecture, Memory and IO Management, Filesystems</li> <li>Concurrency &amp; Multithreading, Process sheduling </li> </ul>"},{"location":"development/web-development/","title":"Web Development","text":"<p>Process of creating and maintaining websites and web applications.</p> <p>Broadly categorized into two main areas: front-end development and back-end development.</p>"},{"location":"development/web-development/#frontend","title":"Frontend","text":"<p>This involves everything that users interact with directly in their web browsers. </p> <p>Key aspects include:</p> <ul> <li>HTML: The structure of web pages.</li> <li>CSS: The styling and layout of web pages.</li> <li>JavaScript: Adding interactivity and dynamic behavior to web pages.</li> </ul> <p>Sample Frameworks and Libraries: React, Angular, or Vue.js that streamline development.</p>"},{"location":"development/web-development/#backend","title":"Backend","text":"<p>Runs the core functionality, business logic, data processing, database interactions. </p>  Microservice Backend of e-Commerce platform  <pre><code># Microservices for E-Commerce Platform\n\nUser Management Service:  \nManages user accounts, roles, and permissions, including customer and admin access.\n\nProduct Management Service:  \nHandles product details, including descriptions, pricing, availability, and categorization.\n\nInventory Management Service:  \nTracks stock levels, manages reordering, and monitors warehouse operations.\n\nShopping Cart Service:  \nManages user shopping carts, including adding, updating, and removing items.\n\nOrder Management Service:  \nHandles the entire order lifecycle, from order creation to fulfillment and invoicing.\n\nPayment Processing Service:  \nManages payment transactions, integrating with payment gateways and handling payment confirmations.\n\nShipping and Fulfillment Service:  \nOversees shipping options, tracking shipments, and managing fulfillment centers.\n\nCustomer Review and Rating Service:  \nFacilitates customer feedback on products, including submitting reviews and ratings.\n\nDiscount and Promotion Service:  \nManages promotional offers, discounts, and coupon codes for products.\n\nAnalytics and Reporting Service:  \nGenerates reports and dashboards on sales performance, user behavior, and inventory metrics.\n\nWishlist Service:  \nAllows users to save products for future purchases and manage their wishlists.\n\nSearch and Recommendation Service:  \nProvides search functionality and personalized product recommendations based on user behavior.\n\nIntegration Service:  \nFacilitates integration with third-party applications, such as CRM, marketing tools, and external APIs.\n\nNotification Service:  \nSends alerts and notifications regarding order status, promotions, and customer account updates.\n\nFeedback and Support Service:  \nHandles customer inquiries, support tickets, and feedback collection.\n</code></pre>  Microservice Backend of Human Capital Management Platform  <pre><code># Microservices for Human Capital Management Platform\n\nUser Management Service:  \nManages user accounts, roles, and permissions, including employee access to the HCM system.\n\nEmployee Management Service:  \nHandles employee records, including personal information, job details, and employment history.\n\nRecruitment Management Service:  \nManages the recruitment process, including job postings, applications, candidate tracking, and interviews.\n\nOnboarding Service:  \nFacilitates the onboarding process for new hires, including document submission, training schedules, and orientation activities.\n\nPayroll Management Service:  \nManages payroll calculations, including salaries, deductions, bonuses, and tax compliance.\n\nBenefits Administration Service:  \nHandles employee benefits, including enrollment, changes, and communication regarding benefits packages.\n\nPerformance Management Service:  \nManages employee performance evaluations, goal setting, and feedback processes.\n\nTraining and Development Service:  \nTracks employee training programs, certifications, and development plans.\n\nTime and Attendance Service:  \nManages employee attendance records, time tracking, leave requests, and scheduling.\n\nSuccession Planning Service:  \nSupports talent management by identifying and developing internal candidates for key positions.\n\nEmployee Engagement Service:  \nManages employee surveys, feedback, and initiatives to improve workplace engagement.\n\nCompliance and Regulatory Service:  \nEnsures adherence to labor laws and regulations, managing compliance documentation and audits.\n\nAnalytics and Reporting Service:  \nGenerates reports and dashboards for HR metrics, workforce analytics, and operational insights.\n\nIntegration Service:  \nFacilitates integration with other systems, such as payroll providers, benefits platforms, and external HR tools.\n\nNotification Service:  \nSends alerts and notifications for important HR events, such as performance reviews, benefits enrollment deadlines, and policy updates.\n</code></pre> <p>Key aspects include:</p> <ul> <li>Server-Side Web Service API: Python, PHP, Ruby, Java, or Node.js that handle business logic.</li> <li>Databases: like MySQL, PostgreSQL, or MongoDB that store and manage data.</li> </ul> <p>The Web Application runs on \"Web Server\" and is rendered on web brower </p>"},{"location":"development/web-development/#middleware","title":"Middleware","text":"<p>Acts as a bridge between the backend and frontend or between different backend services.</p> <p>Typical software are message brokers, API Gateways or integration services for data transformation.</p> <ul> <li><code>Enterprise Service Bus (ESB)</code>: Facilitates data exchange, integration in enterprise environment. e.g. Mulesoft, WSO2 </li> <li><code>API Gateway</code>: API routing, authentication, rate limiting, analytics. e.g. AWS APIGW, Kong, Apigee</li> <li><code>Integration Middlware</code>: ETL processing and handling between applications e.g. Apache Camel, Informatica, Talend</li> <li><code>Caching Middlware</code>: Stores frequently used data in memory to improve app performance by reducing database load e.g. redis, memcached</li> <li><code>Identity Middleware</code>: Manages Identities, AuthN and AuthZ across applications e.g. KeyCloak, Cognito </li> <li><code>RPC Middleware</code>: allows functions to be exected on remote server as though locally e.g. gRPC, Thrift</li> <li><code>Message Middleware</code>: Asynchronous message queuing between applications e.g. Kafka, RabbitMQ</li> </ul>"},{"location":"requirements/business/","title":"Business Requirements","text":"<p>Summarized as Business Requirement Document (BRD) </p> <p>Provide high-level rationale for the initiative and business goal. </p> <p>Describe problems that business wants to solve, contraints and investment. </p> <p>Key aspects are:</p>"},{"location":"requirements/business/#who","title":"Who","text":"<ul> <li>Who are the users/roles</li> <li>Who are the developers</li> <li>Who are the stakeholders</li> </ul>"},{"location":"requirements/business/#what","title":"What","text":"<ul> <li>what does the system do ?</li> <li>What are the main features ?</li> <li>What does the user want to do ?</li> </ul>"},{"location":"requirements/business/#why","title":"Why","text":"<ul> <li>Why is the system needed ?</li> </ul>"},{"location":"requirements/business/#when","title":"When","text":"<ul> <li>when do users need and/or want the solution?</li> <li>when can the developers be done?</li> </ul>"},{"location":"requirements/business/#how","title":"How","text":"<ul> <li>How will the system work ?</li> <li>How many users will there be ?</li> <li>How much data will there be ?</li> </ul>  BRD Template  <pre><code>Executive Summary \nAn overview of the business goals of the project\n\nProject Objectives\nList of business goals in SMART format\n\nProject Background\nOutline context of the project, what problems it solves\n\nProject scope\nOutline what is included and what should be left out\n\nStakeholders\nA list of project stakeholders internal and external\n\nConstraints\nConstraints or limitations (time frame, budget, resources, etc.)\n\nUse Cases \nThe metrics or indicators that will define the fulfillment of the business requirements\n\nProduct Requirements\nOverview of the functional and non-functional requirement (Must Have, Should Have, Nice to Have)\n</code></pre>"},{"location":"requirements/product/","title":"Product Requirements","text":"<p>Summarized as Product Requirement Document (PRD) </p> <p>Describes how system needs to operate to meet the business and user requirements </p> <p>Listed as <code>User stories</code> i.e. short, one-sentence description of features from user's PoV</p> <pre><code>As a &lt; role/persona &gt;\nI want to &lt; activity &gt;\nSo that I can &lt; outcome &gt; \n</code></pre> <p>To evaluate user stories, use the <code>INVEST</code> criteria</p> <ul> <li> <code>Independent</code>: easily prioritized in planning</li> <li> <code>Negotiable</code>: Not a contract</li> <li> <code>Valuable</code>: measure outcome &amp; impact</li> <li> <code>Estimatable</code>: must be sizable </li> <li> <code>Small</code> : Keep scope small</li> <li> <code>Testable</code> : devs should be able to validate </li> </ul> <p>User stories are classified as functional and non-functional requirements.</p>"},{"location":"testing/acceptance/","title":"Acceptance Testing","text":"<p>Purpose: </p> <ul> <li>Determine if the system meets acceptance criteria and is ready for deployment, often from the user's perspective.  </li> </ul> <p>Tools:</p> <ul> <li>TestRail: Test management tool for organizing and managing UAT.</li> <li>UserTesting: Platform for gathering real user feedback and usability testing.</li> <li>Cucumber: Tool for behavior-driven development (BDD) that helps in writing UAT scenarios.</li> <li>QTest: Test management tool that supports UAT processes.  </li> </ul> <p>Types:</p> <ul> <li>User Acceptance Testing (UAT): Conducted by end-users to validate the system meets their needs.</li> <li>Operational Acceptance Testing (OAT): Testing operational aspects like backup, recovery, and maintenance procedures.</li> </ul>"},{"location":"testing/integration/","title":"Integration Testing","text":"<p>Purpose: Verify that combined components or systems interact correctly and function together as intended.  </p> <p>Tools:</p> <ul> <li>Postman: API testing tool for sending requests and validating responses.</li> <li>SoapUI: Tool for testing SOAP and REST APIs.</li> <li>JUnit/TestNG: Can also be used for integration testing in Java.</li> <li>Moq: A .NET mocking framework for simulating components.  </li> </ul> <p>Types:</p> <ul> <li>Big Bang Testing: All components are integrated at once and tested together.</li> <li>Incremental Testing: Components are integrated and tested step-by-step.<ul> <li>Top-Down Integration Testing</li> <li>Bottom-Up Integration Testing</li> </ul> </li> </ul> <p>These are performed on the CI Server.</p>"},{"location":"testing/system/","title":"E2E System Testing","text":"<p>Purpose: Evaluate the complete and integrated software system against specified requirements.  </p> <p>Tools:</p> <ul> <li>Selenium: Web application testing framework for functional testing.</li> <li>LoadRunner: Performance testing tool for simulating virtual users.</li> <li>JMeter: Open-source tool for performance and load testing.</li> <li>OWASP ZAP: Security testing tool for identifying vulnerabilities in web applications.</li> <li>BrowserStack/Sauce Labs: Tools for cross-browser and cross-device compatibility testing.  </li> <li>ChaosMonkey/Gremlin: Tools for injecting random faults into the system</li> </ul> <p>Types:</p> <ul> <li>Functional Testing: Validating functionalities against requirements.</li> <li>Performance Testing: Assessing responsiveness, stability, and scalability under load.</li> <li>Security Testing: Identifying vulnerabilities and ensuring data protection.</li> <li>Compatibility Testing: Ensuring the application works across different environments.</li> <li>Usability Testing: Evaluating user experience and interface design.</li> <li>Reliability Testing: Intentionally introducing failures to test system resilience.</li> </ul>"},{"location":"testing/unit/","title":"Unit Testing","text":"<p>Purpose: Validate that individual components or functions work correctly in isolation.  </p> <p>Tools:</p> <ul> <li>JUnit: Java unit testing framework.</li> <li>NUnit: .NET unit testing framework.</li> <li>pytest: Python testing framework for simple and scalable testing.</li> <li>Mocha/Chai: JavaScript testing frameworks for unit testing in Node.js and browsers.</li> </ul> <p>Types:</p> <ul> <li>Static Testing: Code reviews and inspections.</li> <li>Dynamic Testing: Testing specific functions or methods.</li> </ul>"}]}